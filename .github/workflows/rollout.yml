name: Rollout
on:
  push:
    branches:
      - main

jobs:
  rollout:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Authenticate with Azure
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}" >> $GITHUB_ENV
        working-directory: terraform/

      - name: Initialize Terraform with Backend
        run: terraform init -backend-config="${GITHUB_WORKSPACE}/terraform/backend.tfvars"
        working-directory: terraform/

      - name: Apply Terraform to create VM
        run: terraform apply -auto-approve
        working-directory: terraform/
        timeout-minutes: 30

      - name: Get VM IP from Terraform output
        id: get_outputs
        run: |
          VM_IP=$(terraform output -raw VM_IP | grep -oP '(\d{1,3}\.){3}\d{1,3}' | head -n 1)
          echo "$VM_IP" > $GITHUB_WORKSPACE/vm_ip.txt
        working-directory: terraform/

      - name: Export VM IP to environment file
        run: echo "VM_IP=$(cat $GITHUB_WORKSPACE/vm_ip.txt)" >> $GITHUB_ENV

      # Utilisation de la clé privée stockée dans les secrets GitHub
      - name: Prepare SSH private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ansible_rsa
          chmod 600 ~/.ssh/id_ansible_rsa
        # Ne pas toucher le fichier .ssh/known_hosts, car il existe déjà sur la VM

      - name: Test SSH Connectivity with SSH command
        run: ssh -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" -i ~/.ssh/id_ansible_rsa secureadmin@$(cat $GITHUB_WORKSPACE/vm_ip.txt) echo "SSH connectivity is working"

      - name: Setup Python 2.7 and Ansible 2.9.0 on VM
        run: |
          ssh -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" -i ~/.ssh/id_ansible_rsa secureadmin@$(cat $GITHUB_WORKSPACE/vm_ip.txt) << 'EOF'
            set -e
            sudo apt update -y
            sudo apt upgrade -y
            sudo apt remove --purge python3-venv ansible -y || true
            sudo apt autoremove -y
            sudo apt install -y python2.7 python-pip
            pip install --user ansible==2.9.0
            echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.bashrc
            source ~/.bashrc
            which ansible-playbook
            ansible-playbook --version
          EOF

      - name: Verify Ansible Installation
        run: |
          ssh -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" -i ~/.ssh/id_ansible_rsa secureadmin@$(cat $GITHUB_WORKSPACE/vm_ip.txt) << 'EOF'
            source ~/.bashrc
            which ansible-playbook
            ansible-playbook --version
          EOF

      - name: Run Ansible Playbook with the correct inventory
        run: |
          ssh -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" -i ~/.ssh/id_ansible_rsa secureadmin@$(cat $GITHUB_WORKSPACE/vm_ip.txt) << 'EOF'
            cd /home/secureadmin/ansible
            ansible-playbook -i /home/secureadmin/ansible/hosts playbook.yml
          EOF
