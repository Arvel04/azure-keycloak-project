name: Rollout
on:
  workflow_run:
    workflows: ["Configure"]
    types:
      - completed

jobs:
  rollout:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Authenticate with Azure CLI
        run: |
          echo "${{ secrets.AZURE_CREDENTIALS }}" > myAzureCredentials.json
          az login --service-principal --username ${{ secrets.ARM_CLIENT_ID }} --password ${{ secrets.ARM_CLIENT_SECRET }} --tenant ${{ secrets.ARM_TENANT_ID }}
          az account set --subscription ${{ secrets.ARM_SUBSCRIPTION_ID }}
        working-directory: terraform/

      - name: Initialize Terraform with Backend
        run: terraform init -backend-config="${GITHUB_WORKSPACE}/terraform/backend.tfvars"
        working-directory: terraform/

      - name: Apply Terraform to create VM
        run: |
          terraform apply -auto-approve \
            -var "client_id=${{ secrets.ARM_CLIENT_ID }}" \
            -var "client_secret=${{ secrets.ARM_CLIENT_SECRET }}" \
            -var "subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" \
            -var "tenant_id=${{ secrets.ARM_TENANT_ID }}"
        working-directory: terraform/
        timeout-minutes: 30

      - name: Get VM IP from Terraform output
        id: get_outputs
        run: |
          VM_IP=$(terraform output -raw VM_IP | grep -oP '(\d{1,3}\.){3}\d{1,3}' | head -n 1)
          echo "$VM_IP" > $GITHUB_WORKSPACE/vm_ip.txt
        working-directory: terraform/
      
      - name: Export VM IP to environment file
        run: echo "VM_IP=$(cat $GITHUB_WORKSPACE/vm_ip.txt)" >> $GITHUB_ENV

      - name: Add VM to known_hosts
        run: |
          ssh-keygen -R "$(cat $GITHUB_WORKSPACE/vm_ip.txt)" || true
          ssh-keyscan -H "$(cat $GITHUB_WORKSPACE/vm_ip.txt)" >> ~/.ssh/known_hosts

      - name: Test SSH Connectivity
        run: |
          ssh -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" -i ~/.ssh/id_ansible_rsa secureadmin@$(cat $GITHUB_WORKSPACE/vm_ip.txt) echo "SSH connectivity is working"

      - name: Install Python and pip on VM
        run: |
          ssh -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" -i ~/.ssh/id_ansible_rsa secureadmin@$(cat $GITHUB_WORKSPACE/vm_ip.txt) sudo apt-get update && sudo apt-get install -y python3 python3-pip

      - name: Run Ansible Playbook
        run: |
          ssh -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" -i ~/.ssh/id_ansible_rsa secureadmin@$(cat $GITHUB_WORKSPACE/vm_ip.txt) << 'EOF'
            cd /home/secureadmin/ansible
            ansible-playbook -i hosts playbook.yml -vvvv
          EOF
