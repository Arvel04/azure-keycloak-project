name: Rollout
on:
  push:
    branches:
      - main

jobs:
  rollout:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Authenticate with Azure
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}" >> $GITHUB_ENV
        working-directory: terraform/

      - name: Initialize Terraform with Backend
        run: terraform init -backend-config="${GITHUB_WORKSPACE}/terraform/backend.tfvars"
        working-directory: terraform/

      - name: Apply Terraform to create VM
        run: terraform apply -auto-approve
        working-directory: terraform/
        timeout-minutes: 30

      - name: Get VM IP and credentials from Terraform output
        id: get_outputs
        run: |
          # Récupérer les valeurs de Terraform
          VM_IP=$(terraform output -raw VM_IP)
          VM_USERNAME=$(terraform output -raw vm_username)
          VM_PASSWORD=$(terraform output -raw vm_password)
      
          # Afficher pour déboguer
          echo "Debugging Terraform Outputs:"
          echo "VM_IP=${VM_IP}"
          echo "VM_USERNAME=${VM_USERNAME}"
          echo "VM_PASSWORD=${VM_PASSWORD}"
      
          # Vérification des formats
          echo "Checking VM_USERNAME and VM_PASSWORD for any issues:"
          echo "VM_USERNAME Length: $(echo -n $VM_USERNAME | wc -c)"
          echo "VM_PASSWORD Length: $(echo -n $VM_PASSWORD | wc -c)"
      
          # Sauvegarder dans les fichiers
          echo "$VM_IP" > $GITHUB_WORKSPACE/vm_ip.txt
          echo "$VM_USERNAME" > $GITHUB_WORKSPACE/vm_username.txt
          echo "$VM_PASSWORD" > $GITHUB_WORKSPACE/vm_password.txt
      

      - name: Export VM details to environment variables
        run: |
          VM_IP=$(cat $GITHUB_WORKSPACE/vm_ip.txt | tr -d '\n' | tr -d '\r')
          VM_USERNAME=$(cat $GITHUB_WORKSPACE/vm_username.txt | tr -d '\n' | tr -d '\r' | sed 's/[^a-zA-Z0-9]//g')
          VM_PASSWORD=$(cat $GITHUB_WORKSPACE/vm_password.txt | tr -d '\n' | tr -d '\r' | sed 's/[^a-zA-Z0-9]//g')
        
          # Debugging des variables nettoyées
          echo "Cleaned VM_USERNAME: ${VM_USERNAME}"
          echo "Cleaned VM_PASSWORD: ${VM_PASSWORD}"
        
          # Exporter dans les variables d'environnement
          echo "VM_IP=${VM_IP}" >> $GITHUB_ENV
          echo "VM_USERNAME=${VM_USERNAME}" >> $GITHUB_ENV
          echo "VM_PASSWORD=${VM_PASSWORD}" >> $GITHUB_ENV
        

      - name: Install SSH and sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass
          sudo apt-get install -y openssh-client

      - name: Verify Connectivity with Username and Password
        run: |
          VM_IP=$(cat $GITHUB_WORKSPACE/vm_ip.txt | tr -d '\n' | tr -d '\r')
          VM_USERNAME=$(cat $GITHUB_WORKSPACE/vm_username.txt | tr -d '\n' | tr -d '\r' | sed 's/[^a-zA-Z0-9]//g')
          VM_PASSWORD=$(cat $GITHUB_WORKSPACE/vm_password.txt | tr -d '\n' | tr -d '\r' | sed 's/[^a-zA-Z0-9]//g')
        
          # Debugging
          echo "Testing connection with:"
          echo "VM_IP=${VM_IP}"
          echo "VM_USERNAME=${VM_USERNAME}"
          echo "VM_PASSWORD=${VM_PASSWORD}"
        
          sshpass -p "$VM_PASSWORD" ssh -o StrictHostKeyChecking=no "$VM_USERNAME@$VM_IP" echo "Connection successful"
        
        

      - name: Copy Ansible Inventory and Playbook to VM
        run: |
          sshpass -p "$VM_PASSWORD" ssh -o StrictHostKeyChecking=no "$VM_USERNAME@$VM_IP" << EOF
            mkdir -p ~/ansible
            echo "[webserver]" > ~/ansible/hosts
            echo "$VM_IP ansible_user=$VM_USERNAME ansible_password=$VM_PASSWORD" >> ~/ansible/hosts
          EOF
          sshpass -p "$VM_PASSWORD" scp -o StrictHostKeyChecking=no -r $GITHUB_WORKSPACE/ansible "$VM_USERNAME@$VM_IP:~/ansible"

      - name: Run Ansible Playbook with Username and Password
        run: |
          sshpass -p "$VM_PASSWORD" ssh -o StrictHostKeyChecking=no "$VM_USERNAME@$VM_IP" << 'EOF'
            set -e
            cd ~/ansible
            ansible -i hosts webserver -m ping -vvv
            ansible-playbook -vvv -i hosts playbook.yml
          EOF
