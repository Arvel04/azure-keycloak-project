name: Rollout
on:
  push:
    branches:
      - main

jobs:
  rollout:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Authenticate with Azure
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}" >> $GITHUB_ENV
        working-directory: terraform/

      - name: Initialize Terraform with Backend
        run: terraform init -backend-config="${GITHUB_WORKSPACE}/terraform/backend.tfvars"
        working-directory: terraform/

      - name: Apply Terraform to create VM
        run: terraform apply -auto-approve
        working-directory: terraform/
        timeout-minutes: 30  # Timeout augmenté pour l'étape Terraform

      - name: Get VM IP and private key from Terraform output
        id: get_outputs
        run: |
          VM_IP=$(terraform output -raw VM_IP | grep -oP '(\d{1,3}\.){3}\d{1,3}' | head -n 1)
          PRIVATE_KEY=$(terraform output -raw private_key)
          echo "Extracted VM_IP: $VM_IP"
          echo "$VM_IP" > $GITHUB_WORKSPACE/vm_ip.txt
          echo "$PRIVATE_KEY" > $GITHUB_WORKSPACE/id_ansible_rsa
        working-directory: terraform/

      - name: Export VM IP to environment file
        run: echo "VM_IP=$(cat $GITHUB_WORKSPACE/vm_ip.txt)" >> $GITHUB_ENV

      - name: Debug VM IP
        run: echo "VM IP is $(cat $GITHUB_WORKSPACE/vm_ip.txt)"

      - name: Create SSH directory
        run: mkdir -p ~/.ssh

      - name: Configure SSH key for Ansible
        run: |
          mv $GITHUB_WORKSPACE/id_ansible_rsa ~/.ssh/id_ansible_rsa
          chmod 600 ~/.ssh/id_ansible_rsa

      # Start SSH agent and add key
      - name: Start SSH agent and add key
        run: |
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_ansible_rsa

      # Test SSH Connectivity with extended timeout
      - name: Test SSH Connectivity
        run: |
          ssh -vvv -i ~/.ssh/id_ansible_rsa -o StrictHostKeyChecking=no -o IdentitiesOnly=yes -o ConnectTimeout=60 secureadmin@$(cat $GITHUB_WORKSPACE/vm_ip.txt) echo "SSH connectivity is working"

      - name: Create Static Inventory with VM IP
        run: |
          echo "[webserver]" > $GITHUB_WORKSPACE/ansible/hosts
          IP_ADDRESS=$(cat $GITHUB_WORKSPACE/vm_ip.txt | head -n 1)
          echo "$IP_ADDRESS ansible_user=secureadmin ansible_ssh_private_key_file=~/.ssh/id_ansible_rsa" >> $GITHUB_WORKSPACE/ansible/hosts

      - name: Debug the created inventory
        run: cat $GITHUB_WORKSPACE/ansible/hosts

      # Install Python and Ansible on VM
      - name: Update Python and install Ansible on VM
        run: |
          ssh -i ~/.ssh/id_ansible_rsa -o StrictHostKeyChecking=no secureadmin@$(cat $GITHUB_WORKSPACE/vm_ip.txt) << 'EOF'
            sudo apt update -y
            sudo apt upgrade -y
            sudo apt install python3-pip python3-dev build-essential libssl-dev libffi-dev python3-setuptools -y
            sudo apt install rustc cargo -y
            sudo pip3 install --upgrade pip  
            sudo pip3 install --upgrade setuptools_rust
            sudo pip3 install --upgrade cryptography
            sudo pip3 install --upgrade ansible  
          EOF

      # Run Ansible Playbook
      - name: Run Ansible Playbook with verbose output
        run: ansible-playbook -vvv -i $GITHUB_WORKSPACE/ansible/hosts ansible/playbook.yml
        env:
          VM_IP: ${{ env.VM_IP }}
